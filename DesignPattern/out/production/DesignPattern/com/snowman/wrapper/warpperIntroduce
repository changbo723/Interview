装饰模式又名包装模式

装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案

装饰模式以对客户透明的方式动态的给一个对象附加上更多的责任，换言之，客户端并不会觉得对象
在装饰前和装饰后有什么不同

装饰模式可以在不创造更多子类的情况下，将对象的功能加以扩展

装饰模式把客户端的调用委派到被装饰类，装饰模式的关键在于这种扩展完全是透明的

装饰模式是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。
它是通过创建一个包装对象，也就是装饰来包裹真是的对象

装饰模式的角色
抽象构建角色 给出一个抽象接口，以规范准备接受附加责任的对象

具体构建角色 定义一个将要接受附加责任的类

装饰角色 持有一个构建对象的引用，并定义一个与抽象构建接口一致的接口

具体装饰角色 负责给构建对象贴上附加的责任

装饰模式的特点
装饰对象和真实对象又相同的接口。这样客户端对象可以以和真实对象相同的方式和装饰对象交互
装饰对象包含一个真实对象的引用
装饰对象接受所有来自客户端的请求，把请求转发给真实的对象
装饰对象可以在转发这些请求的时候增加一些附加功能

装饰VS继承

装饰
扩展对象的功能
不需要子类
动态
运行时分配职责
防止由于子类而导致的混乱和复杂
更加灵活

继承
需要子类
静态
编译时分配指着
导致很多子类的产生

