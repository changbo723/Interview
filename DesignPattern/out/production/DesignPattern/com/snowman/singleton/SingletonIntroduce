核心作用
保证一个类只有一个实例，并且提供一个访问该实例的全局访问点

常见应用场景
win的Task manarger 和 win的Recycle 就是典型的单例模式
一般网站的计数器
数据库连接池的设计
在Spring中，每个bean默认就是单例的，这样做的优点是Spring容器可以管理

单例模式的优点
由于单例模式只产生了一个实例，减少了系统性能的开销，当一个对象的产生需要比较多的资源时，
如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个对象，然后永久主流内存的方式来解决
单例模式可以在系统设置全局的访问点，例如设计一个单例类，负责所有数据表的映射处理

常见的5种单例模式实现方式
主要
饿汗式(线程安全，调用效率高，但是不能延迟加载)
懒汗式(线程不安全，调用效率不高，但是能延迟加载)

其他
双重检测锁式(由于JVM底层内部模型的问题，偶尔会出问题，不建议使用)
静态内部类式(线程安全，调用效率高，可以延迟加载)
枚举单例(线程安全，调用效率高，不能延迟加载)
