什么是线程
线程就是程序中单独顺序的流程控制。线程本身不能运行，它只能用于程序中

线程和进程的区别
多个进程的内部数据和状态是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响
线程的切换比进程切换的负担要小

什么是多线程
单个程序中可以同时运行多个不同的线程执行不同的任务

多线程编程的目的
最大限度的利用CPU资源，当某一线程的处理不需要占用CPU而只和IO等资源打交道，让需要资源的其他
线程有机会获得CPU资源

当程序启动运行时，就自动产生一个线程，主方法main就在这个线程上运行，
我们的程序都是由线程来执行的

进程
执行中的程序

线程同步
在多线程环境中，可能会有2个甚至更多的线程试图同时访问一个有限的资源，必须对这种潜在的资源冲突进行预防

解决方法
在线程使用一个资源的时为其加锁即可。访问资源的第一个线程为其加上锁以后，其他线程便不能在使用哪个资源
除非被解锁

synchronized关键字
当synchronized关键字修饰一个方法的时候，该方法叫同步方法

java中的每个对象都有一个锁(lock)或者叫做监视器(monitor)，当访问某个对象的synchronized方法是时，
表示该对象上锁，此时其他任何线程都无法再去访问该synchronized方法，知道之前的那个线程执行方完毕后
或者抛出了异常，那么该对象的锁释放掉，其他线程才有可能在去访问该synchronized方法

如果一个对象有多个synchronized方法，某一时刻线程已经进入到了某个synchronized方法，那么在该方法
没有执行完毕前，其他线程无法访问该对象的任何synchronized方法

如果某个synchronized方法是static的，那么当线程昂文该方法的时，它锁的并不是synchronized方法
所在的对象，而是synchronized方法所在的对象对应的class对象，因为java中无论一个类有多少个对象
，这些对象会对应唯一一个class对象，因此当线程访问同一个类的两个对象的static synchronized方法时，
它们的执行也是顺序的


多进程
允许你的计算机同事运行两个或更多的程序

多线程
一个程序可以同时执行两个或者多个任务的功能
一个进程至少要包含一个线程

当使用Thread来创建线程对象时，我们需要重写Run方法，因为Thread类的Run方法什么都不做
当使用Runnable来创建线程对象时，我们需要实现Runnable的Run方法

线程的消亡不能通过调用stop方法，而是让run方法自然结束

守护线程
一般当最后一个线程结束时，java程序才推出
守护线程的存在不影响java程序的推出
setDaemon(true)必须在start之前调用
守护线程主要用来做辅助性工作
